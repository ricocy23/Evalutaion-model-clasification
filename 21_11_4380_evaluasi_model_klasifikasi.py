# -*- coding: utf-8 -*-
"""21.11.4380_Evaluasi_Model_Klasifikasi.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HaMjwSFtfkfQQbaPTpGLhAbe5THEc5Kd

**Nama: RICHARDO UMBU SIWA DJURUMANNA SUYATNO**
<br>
**Nim: 21.11.4380**

## Week 10- Metric Evaluation

Evaluasi model, digunakan untuk mengetahui  algoritma yang paling bagus berdasarkan dataset yang kita berikan untuk menyelesaikan masalah tertentu. Dalam istilah machine learning, disebut **Best Fit**. Evaluasi ini digunakan untuk mengukur kinerja berbagai model machine learning, berdasarkan kumpulan data masukan yang sama. Metode evaluasi berfokus pada akurasi model, dalam memprediksi hasil akhir.

Untuk mengevaluasi kinerja model Machine Learning, ada beberapa Metrik untuk mengetahui kinerjanya dan diterapkan untuk algoritma Regresi dan Klasifikasi. Berbagai jenis metrik klasifikasi adalah:


1.   Confusion Matrix   
2.   Classification Accuracy
3.   Precision
4.   Recall
5.   Specificity
6.   F1- Score
7.   Precision-Recall or PR curve
8.   ROC (Receiver Operating Characteristics) curve
4.   Area under Curve (AUC)


Confusion matrix



<img src="https://drive.google.com/uc?id=1ekrnyxkbLkbvbJdScha8cqH2V7EnFl8P" />
"""

# Importing necessary libraries
from sklearn.datasets import load_breast_cancer
from sklearn.naive_bayes import GaussianNB
from sklearn.model_selection import train_test_split
import pandas as pd
import numpy as np

# Loading the breast cancer data set
diabetes_data = load_breast_cancer()

# Load dataset into dataframe
df_breast_cancer = pd.DataFrame(data=diabetes_data.data,
                                columns= diabetes_data.feature_names)

df_breast_cancer.head()

# Creating independent and dependent variables
X = diabetes_data.data
y = diabetes_data.target

# Splitting the data into training and testing set
X_train, X_test, y_train, y_test = train_test_split(X, y,
                                                    test_size=0.2,
                                                    random_state=24)

print(f"Train Data: {X_train.shape}, {y_train.shape}")
print(f"Test Data: {X_test.shape}, {y_test.shape}")

# Create model Classifier
classifier = GaussianNB()
# Training the Naive Bayes model on the Training set
classifier.fit(X_train, y_train)

# Predict data using test data
predictions = classifier.predict(X_test)

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, predictions, labels=classifier.classes_)
print(cm)

#confusion matrix plot
from sklearn.metrics import ConfusionMatrixDisplay
import matplotlib.pyplot as plt

disp = ConfusionMatrixDisplay(confusion_matrix=cm,
                              display_labels=classifier.classes_)

disp.plot()
plt.show()

"""### 1. Accuracy
Accuracy merupakan Metrik yang paling umum digunakan untuk menilai model dan sebenarnya **bukan** merupakan indikator kinerja yang jelas. Dan tidak akan representatif jika datanya adalah **imbalanced** dataset.

<img src="https://drive.google.com/uc?id=163_SzaLAawoEbl1Rx99U48SuUnpeLsLI">
"""

TP = 68  # True Positives
TN = 37 # True Negatives
FP = 4  # False Positives
FN = 5 # False Negatives

accuracy = (TP + TN) / (TP + TN + FP + FN)
print(accuracy)

"""### 2. Precision
Precision merupakan Perbandingan **True positive** dari banyaknya data yang **diprediksi positif**

<img src="https://drive.google.com/uc?id=1jKyX8D1CdcQH9rZrRN-wIYUI0s1VJKBz">

"""

TP = 68  # True Positives
TN = 37 # True Negatives
FP = 4  # False Positives
FN = 5 # False Negatives

presicion = (TP) / (TP + FP)
print("Precision :",presicion)

"""### 3.  Recall/Sensitivity/True Positive Rate
Recall merupakan rasio prediksi benar positif dibandingkan dengan keseluruhan data yang benar positif. Dengan recall kita akan mengetahui prosentase  paseien yang diprediksi terkena cancer dibandingkan keseluruhan data pasien yang sebenarnya terkena cancer‚Äù.

<img src="https://drive.google.com/uc?id=1lqnEjszbZcxfwXTrueBoqa_WF5mgX_lt">
"""

TP = 68  # True Positives
TN = 37 # True Negatives
FP = 4  # False Positives
FN = 5 # False Negatives

recall = (TP) / (TP + FN)
print("Recall :",recall)

"""### 4. Specificity
Merupakan perbandingan True Negative terhadap keseluruhan data negatif. Ini mirip dengan recall tetapi perspektifnya pada data kelas negative. Seperti mencari tahu berapa banyak pasien **sehat yang tidak mengidap kanker dan diprediksi bahwa mereka tidak mengidap kanker**. Semacam ukuran untuk melihat seberapa terpisah kelas-kelas itu.

<img src="https://drive.google.com/uc?id=1n2qRnRbXOI4laNinh_jGeXb5xuOqZsIU">

"""

#hitung specificity dengan menggunakan persamaan tersebut
TP = 68  # True Positives
TN = 37 # True Negatives
FP = 4  # False Positives
FN = 5 # False Negatives

specificity = (TN) / (TP + FP)
print("spesificity :", specificity)

"""### 5. F1 Score
Ini adalah rata-rata Precision dan recall yang harmonis. Ini mengambil kontribusi keduanya, jadi semakin tinggi skor F1 semakin baik. digunakan untuk mengukur performa data imbalance

<img src="https://drive.google.com/uc?id=1r_dR5nzmu2KnATDAIehoxtlKFpqkkD-s">
"""

#hitung nilai f1 score dengan menggunakan persamaan tersebut
TP = 68  # True Positives
TN = 37 # True Negatives
FP = 4  # False Positives
FN = 5 # False Negatives
# Calculate Precision and Recall
precision = TP / (TP + FP)
recall = TP / (TP + FN)

# Calculate F1-score
f1_score = (2 * precision * recall) / (precision + recall)

print("F1-score: ", f1_score)

from sklearn.metrics import classification_report

# Contoh label sebenarnya dan prediksi
y_true = [1, 0, 1, 1, 0, 1]
y_pred = [1, 0, 1, 0, 0, 1]

# Mendapatkan classification report
report = classification_report(y_true, y_pred)

# Menampilkan classification report
print(report)

# Menampilkan classification report
report = classification_report(y_test, predictions)
print(report)

# Jalankan kode berikut
from sklearn.metrics import precision_score

# Calculating the precision score of classifier
print(f"Precision Score of the classifier is: {precision_score(y_test, predictions)}")

"""Hasil Precision Score yang di peroleh adalah sekitar 0.9444. Precision mengukur sejauh mana model berhasil mengidentifikasi positif dengan benar dari semua prediksi yang diklasifikasikan sebagai positif. Dengan nilai Precision yang tinggi seperti ini, dapat diartikan bahwa sebagian besar dari yang diprediksi sebagai positif oleh model memang benar-benar positif.

more info about metric in scikit learn you can access in: https://scikit-learn.org/stable/modules/model_evaluation.html
"""

# Importing all necessary libraries
from imblearn.metrics import specificity_score
# Calculating the Specifity score of classifier
print(f"Specificity Score of the classifier is: {specificity_score(y_test, predictions)}")

"""Hasil Specificity Score yang di peroleh adalah sekitar 0.9024. Specificity mengukur sejauh mana model berhasil mengidentifikasi negatif dengan benar dari semua instansi yang sebenarnya negatif. Dengan nilai Specificity yang tinggi seperti ini, dapat diartikan bahwa sebagian besar dari yang sebenarnya negatif berhasil diidentifikasi dengan benar oleh model.

### 6.ROC-AUC
ROC merupakan singkatan dari (Receiver Operating Characteristic)dan digambarkan dalam grafik dari nilai TPR dan FPR.ROC adalah Metrik Evaluasi yang banyak digunakan, terutama digunakan untuk Klasifikasi **Biner**. True Positive Rate(TPR) dan False Positive Rate(FPR) memiliki nilai mulai dari 0 hingga 1. TPR dan FPR dihitung dengan nilai Treshold yang berbeda2 dan grafik digambar untuk lebih memahami tentang data. ROC adalah kurva probabilitas dan AUC mewakili derajat atau ukuran keterpisahan. Ini memberi tahu berapa banyak model yang mampu membedakan antar kelas. Dengan demikian, Area Di Bawah Kurva adalah plot antara False Positive Rate(FPR) dan True Positive rate pada nilai [0,1] yang berbeda.
ROC AUC hanyalah area di bawah kurva, semakin tinggi nilai numeriknya semakin baik.

<img src="https://drive.google.com/uc?id=1ygO91zLLtLX1cki7o5v7iz8OVKK9WlkJ">
"""

# Importing all necessary libraries
from sklearn.metrics import roc_curve, auc
class_probabilities = classifier.predict_proba(X_test)
preds = class_probabilities[:, 1]
fpr, tpr, threshold = roc_curve(y_test, preds)
roc_auc = auc(fpr, tpr)
# Printing AUC
print(f"AUC for our classifier is: {roc_auc}")

# Plotting the ROC
plt.title('Receiver Operating Characteristic')
plt.plot(fpr, tpr, 'b', label = 'AUC = %0.2f' % roc_auc)
plt.legend(loc = 'lower right')
plt.plot([0, 1], [0, 1],'r--')
plt.xlim([0, 1])
plt.ylim([0, 1])
plt.ylabel('True Positive Rate')
plt.xlabel('False Positive Rate')
plt.show()

threshold

"""The optimal cut off would be where **tpr is high and fpr is low**
**tpr - (1-fpr)** is **zero** or near to zero is **the optimal cut off point**
"""

optimal_idx = np.argmax(tpr - fpr)
optimal_threshold = threshold[optimal_idx]
print("Threshold value is:", optimal_threshold)

#dengan menggunakan data train dan data test tersebut,
#buatlah model baru dengan menggunakan algoritma decision tree
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

decision_tree_model = DecisionTreeClassifier(random_state=42)

decision_tree_model.fit(X_train, y_train)

predictions_dt = decision_tree_model.predict(X_test)

accuracy_dt = accuracy_score(y_test, predictions_dt)
print(f"Accuracy of Decision Tree model: {accuracy_dt}")

print("Classification Report:")
print(classification_report(y_test, predictions_dt))

print("Confusion Matrix:")
print(confusion_matrix(y_test, predictions_dt))

"""    Classification Report: Menyediakan informasi terperinci tentang precision, recall, dan F1-score untuk setiap kelas, serta nilai rata-rata mikro, rata-rata makro, dan rata-rata berponderasi.

    Confusion Matrix: Menunjukkan jumlah True Positives (TP), True Negatives (TN), False Positives (FP), dan False Negatives (FN).

    Akurasi (Accuracy): Merupakan persentase total prediksi yang benar dari semua prediksi.
"""

#bandingkan hasilnya dengan model yang di bangun menggunakan algoritma gaussian naive bayes, berikan komentar anda
from sklearn.naive_bayes import GaussianNB

naive_bayes_model = GaussianNB()

naive_bayes_model.fit(X_train, y_train)

predictions_nb = naive_bayes_model.predict(X_test)

accuracy_nb = accuracy_score(y_test, predictions_nb)

print("Classification Report for Gaussian Naive Bayes:")
print(classification_report(y_test, predictions_nb))

print("Confusion Matrix for Gaussian Naive Bayes:")
print(confusion_matrix(y_test, predictions_nb))

print(f"Accuracy of Gaussian Naive Bayes model: {accuracy_nb}")

"""Setelah menjalankan perbandingan ini, Anda dapat membandingkan metrik evaluasi antara model Decision Tree dan Gaussian Naive Bayes. Perhatikan bahwa kinerja model dapat bervariasi tergantung pada sifat data dan masalah yang dihadapi. Beberapa hal yang dapat diperhatikan:

    Decision Tree cenderung dapat menangani hubungan non-linear dalam data.
    Gaussian Naive Bayes cenderung bekerja lebih baik pada dataset dengan asumsi bahwa fitur-fitur adalah independen.

### Multiclass Classification
"""

# importing necessary libraries
from sklearn import datasets
from sklearn.metrics import confusion_matrix
from sklearn.model_selection import train_test_split

iris = datasets.load_iris()

X = iris.data
y = iris.target

X_train, X_test, y_train, y_test = train_test_split(X, y, random_state = 0)

from sklearn.naive_bayes import GaussianNB
gnb = GaussianNB().fit(X_train, y_train)
gnb_predictions = gnb.predict(X_test)

cm = confusion_matrix(y_test, gnb_predictions)

# visualisasikan hasil confusion matrix menggunakan matpotlib
import matplotlib.pyplot as plt
import seaborn as sns

sns.heatmap(cm, annot=True, fmt='g', cmap='Blues', xticklabels=iris.target_names, yticklabels=iris.target_names)

plt.xlabel('Predicted')
plt.ylabel('True')

plt.title('Confusion Matrix')

plt.show()

# lakukan evaluasi terhadap performa model gausian dalam klasifikasi bunga iris tersebut
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

gnb_predictions = gnb.predict(X_test)

accuracy_gnb = accuracy_score(y_test, gnb_predictions)

print("Classification Report for Gaussian Naive Bayes:")
print(classification_report(y_test, gnb_predictions, target_names=iris.target_names))

print("Confusion Matrix for Gaussian Naive Bayes:")
print(confusion_matrix(y_test, gnb_predictions))

print(f"Accuracy of Gaussian Naive Bayes model: {accuracy_gnb}")

# dengan menggunakan data train dan data test tersebut, buat model baru dengan algoritma decesion tree.
# boleh di modif dengan pruning langsung agar lebih ringan modelnya
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

decision_tree_pruned = DecisionTreeClassifier(max_depth=3, random_state=42)

decision_tree_pruned.fit(X_train, y_train)

predictions_pruned = decision_tree_pruned.predict(X_test)

accuracy_pruned = accuracy_score(y_test, predictions_pruned)

print("Classification Report for Decision Tree with Pruning:")
print(classification_report(y_test, predictions_pruned, target_names=iris.target_names))

print("Confusion Matrix for Decision Tree with Pruning:")
print(confusion_matrix(y_test, predictions_pruned))

print(f"Accuracy of Decision Tree with Pruning: {accuracy_pruned}")

from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

predictions_pruned = decision_tree_pruned.predict(X_test)

accuracy_pruned = accuracy_score(y_test, predictions_pruned)

print("Classification Report for Decision Tree with Pruning:")
print(classification_report(y_test, predictions_pruned, target_names=iris.target_names))

print("Confusion Matrix for Decision Tree with Pruning:")
print(confusion_matrix(y_test, predictions_pruned))

print(f"Accuracy of Decision Tree with Pruning: {accuracy_pruned}")

#bandingkan hasil model gausian vs decision tree dalam klasifikasi bunga iris.
#berikan komentar anda

"""Dalam membandingkan model Gaussian Naive Bayes dan model Decision Tree untuk klasifikasi bunga iris, kita dapat melihat metrik evaluasi yang telah dihitung. Metrik tersebut mencakup akurasi, precision, recall, dan F1-score. Dengan mengevaluasi kedua model ini, kita dapat memahami kekuatan dan kelemahan masing-masing model dalam konteks tugas klasifikasi bunga iris.

Berikut adalah beberapa pertimbangan umum:

    Akurasi:
        Gaussian Naive Bayes: Akurasi model Gaussian Naive Bayes.
        Decision Tree: Akurasi model Decision Tree.

    Precision, Recall, dan F1-score:
        Gaussian Naive Bayes: Precision, recall, dan F1-score untuk setiap kelas.
        Decision Tree: Precision, recall, dan F1-score untuk setiap kelas.

    Confusion Matrix:
        Gaussian Naive Bayes: Matriks kebingungan untuk menunjukkan seberapa baik model Gaussian Naive Bayes dapat mengklasifikasikan instance dari setiap kelas.
        Decision Tree: Matriks kebingungan untuk menunjukkan seberapa baik model Decision Tree dengan pemangkasan dapat mengklasifikasikan instance dari setiap kelas.
"""

# submit jawaban anda ke : ungu.in/evaluasi-10

"""\Referensi:

1.   https://towardsdatascience.com/various-ways-to-evaluate-a-machine-learning-models-performance-230449055f15
2.   https://medium.com/analytics-vidhya/evaluation-metrics-for-classification-problems-with-implementation-in-python-a20193b4f2c3


"""